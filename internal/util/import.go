// Licensed Materials - Property of IBM
// Copyright IBM Corp. 2023.
package util

import (
	"errors"
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"

	"golang.org/x/tools/go/vcs"
)

// Copies a module to the given path
func CloneModuleFromCache(dstdir string, modpath string) error {
	srcdir, err := GoListModDir(modpath)
	if err != nil {
		return err
	}

	// Copy module to workspace
	if err := copyAll(dstdir, srcdir); err != nil {
		return err
	}

	return generate(filepath.Join(dstdir, "go.mod"), goModTemplate(modpath))
}

// Copies a module to the given path
func CloneModuleFromVCS(dstdir string, modpath string, version string) error {
	repo, err := vcs.RepoRootForImportPath(modpath, false)
	if err != nil {
		return err
	}

	err = repo.VCS.CreateAtRev(dstdir, repo.Repo, version)
	if err != nil {
		return err
	}

	return generate(filepath.Join(dstdir, "go.mod"), goModTemplate(modpath))
}

// Util copy function
func copyAll(dst, src string) error {
	srcInfo, srcErr := os.Lstat(src)
	if srcErr != nil {
		return fmt.Errorf("copy: %w", srcErr)
	}
	_, dstErr := os.Lstat(dst)
	if dstErr != nil && !errors.Is(dstErr, fs.ErrNotExist) {
		return fmt.Errorf("copy: %w", dstErr)
	}
	switch mode := srcInfo.Mode(); mode & os.ModeType {
	case os.ModeSymlink:
		return fmt.Errorf("copy: will not copy symbolic link")
	case os.ModeDir:
		return copyDir(dst, src)
	case 0:
		return CopyFile(dst, src)
	default:
		return fmt.Errorf("copy: cannot copy file with mode %v", mode)
	}
}

// Util copy file function
func CopyFile(dst, src string) error {
	srcf, err := os.Open(src)
	if err != nil {
		return fmt.Errorf("copy: %w", err)
	}
	defer srcf.Close()
	dstf, err := os.OpenFile(dst, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
	if err != nil {
		return fmt.Errorf("copy: %w", err)
	}
	defer dstf.Close()
	if _, err := io.Copy(dstf, srcf); err != nil {
		return fmt.Errorf("copy: cannot copy %q to %q: %w", src, dst, err)
	}
	return nil
}

// Util copy directory function
func copyDir(dst, src string) error {
	srcf, err := os.Open(src)
	if err != nil {
		return fmt.Errorf("copy: %w", err)
	}
	defer srcf.Close()
	if err := os.MkdirAll(dst, 0777); err != nil {
		return fmt.Errorf("copy: %w", err)
	}
	for {
		names, err := srcf.Readdirnames(100)
		for _, name := range names {
			if err := copyAll(filepath.Join(dst, name), filepath.Join(src, name)); err != nil {
				return err
			}
		}
		if err == io.EOF {
			break
		}
		if err != nil {
			return fmt.Errorf("copy: error reading directory %q: %w", src, err)
		}
	}
	return nil
}

func goModTemplate(path string) string {
	// TODO: figure out a way to make sure we keep the same versions for stuff
	return "// Generated by IBM Wharf; DO NOT EDIT.\nmodule " + path + "\n"
}

func generate(file, content string) error {
	if _, err := os.Stat(file); err == nil {
		return nil
	}
	if err := os.WriteFile(file, []byte(content), 0666); err != nil {
		return fmt.Errorf("could not generate %q: %w", file, err)
	}
	return nil
}
